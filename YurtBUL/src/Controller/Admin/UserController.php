<?php

namespace App\Controller\Admin;

use App\Entity\User;
use App\Form\UserType;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Tests\RequestContentProxy;
use Symfony\Component\Routing\Annotation\Route;


/**
 * @Route("/admin/user")
 */
class UserController extends AbstractController
{
    /**
     * @Route("/", name="admin_user_index", methods="GET")
     */
    public function index()
    {
        $user=$this->getDoctrine()->getRepository(user::class)
            ->findAll();
        return $this->render('admin/user/index.html.twig', [
            'user' => $user,
        ]);
    }
    /**
     * @Route("/{id}/iedit", name="admin_user_iedit", methods="GET|POST")
     */
    public function iedit(Request $request,$id, User $user): Response
    {
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('admin_user_index', ['id' => $user->getId()]);
        }

        return $this->render('admin/user/image_edit.html.twig', [
            'user' => $user,
            'id' => $id,
            'form' => $form->createView(),
        ]);
    }
    /**
     * @Route("/{id}/iupdate", name="admin_user_iupdate", methods="POST")
     */
    public function iupdate(Request $request,$id, User $user): Response
    {
        $form = $this->createForm(UserType::class, $user);
        $form->handleRequest($request);
        if($request->files->get('imname')){
            $file = $request->files->get('imname');

            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('images_directory'),//servis.yaml deki
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }
            $user->setImage($fileName);
        }
        $this->getDoctrine()->getManager()->flush();
        return $this->redirectToRoute('admin_user_iedit', ['id' => $user->getId()]);
    }
    /**
     * @Route("/new", name="admin_user_new", methods="GET|POST")
     */
    public function new(Request $request):Response
    {
        $user=new User();
        $form=$this->createForm(UserType::class,$user);
        $form->handleRequest($request);

        if($form->isSubmitted() ){
            $em=$this->getDoctrine()->getManager();
            $em->persist($user);
            $em->flush();
            return $this->redirectToRoute('admin_user_index');
        }

        return $this->render('admin/user/new.html.twig', ['form'=>$form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="admin_user_show", methods="GET")
     */
    public function show(User $user): Response
    {
        return $this->render('admin/user/show.html.twig', ['user' => $user]);
    }


    /**
     * @Route("/{id}/edit", name="admin_user_edit", methods="GET|POST")
     */
    public function edit(Request $request, User $user):Response
    {
        $form=$this->createForm(UserType::class, $user);
        $form->handleRequest($request);
        if($form->isSubmitted() ){
            $this->getDoctrine()->getManager()->flush();
            return $this->redirectToRoute('admin_user_index');
        }
        return $this->render('admin/user/edit.html.twig', [
            'user'=>$user,
            'form'=>$form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="admin_user_delete", methods="DELETE")
     */
    public function delete(Request $request, User $user): Response
    {
        if ($this->isCsrfTokenValid('delete'.$user->getId(), $request->request->get('_token'))) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($user);
            $em->flush();
        }

        return $this->redirectToRoute('admin_user_index');
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
