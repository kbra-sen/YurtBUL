<?php

namespace App\Controller;
use App\Entity\Admin\Image;
use App\Form\Admin\ImageType;
use App\Repository\Admin\ImageRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
class YurtImageController extends AbstractController
{
    /**
     * @Route("/yurtimage", name="yurtimage")
     */
    public function index(ImageRepository $imageRepository)
    {
        return $this->render('yurt_image/index.html.twig', ['images' => $imageRepository->findAll()]);
    }
    /**
     * @Route("/new/{id}", name="imagenew", methods="GET|POST")
     */
    public function new(Request $request,$id,ImageRepository $imageRepository): Response
    {

        $imagelist = $imageRepository->findBy(['yurtid' => $id]);
        $image = new Image();
        $form = $this->createForm(ImageType::class, $image);
        $form->handleRequest($request);

        if ($request->files->get('imname')) {
            $file = $request->files->get('imname');//imname formdaki
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            // Move the file to the directory where brochures are stored
            try {
                $file->move(
                    $this->getParameter('images_directory'),//servis.yaml deki
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }
            $image->setImage($fileName);
            $image->setYurtid($id);
            $em = $this->getDoctrine()->getManager();
            $em->persist($image);
            $em->flush();

            return $this->redirectToRoute('imagenew',array('id' => $id));
        }

        return $this->render('yurt_image/new.html.twig', [
            'image' => $image,
            'id' => $id,
            'imagelist'=> $imagelist,
            'form' => $form->createView(),
        ]);
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
